#version 330 core

in vec3 fragPosition;
in vec2 UV;
in vec3 Normal_worldspace;

out vec4 color;

struct DirectionalLight{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight{
	vec3 position;
	
	float constant;
	float linear;
	float quadratic;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

#define NB_POINT_LIGHTS 4

uniform DirectionalLight dirLight;
uniform PointLight pointLights[NB_POINT_LIGHTS];
uniform Material material;

uniform mat4 Mfragment;
uniform vec3 viewPos;


vec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
	vec3 result = vec3(0.0f);
	
	vec3 norm = normalize(Normal_worldspace);
	
	vec3 viewDir = normalize(viewPos - fragPosition);
	
	result += CalcDirectionalLight(dirLight, norm, viewDir);
	
	for(int i = 0; i < NB_POINT_LIGHTS; i++)
	{
		result += CalcPointLight(pointLights[i], norm, fragPosition, viewDir);
	}
	
	result = clamp(result, 0.0, 1.0);
	color = vec4(result, 1.0f);
}

vec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDirection = normalize(dirLight.position);
	
	float diff = clamp(dot(normal, lightDirection), 0.0, 1.0);
	
	vec3 reflectDir = reflect(-lightDirection, normal);
	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, UV));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, UV));
	vec3 specular = light.specular * spec * vec3(texture(material.specular, UV));
	
	return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDirection = normalize(light.position - fragPos);
	
	float diff = clamp(dot(normal, lightDirection), 0.0, 1.0);
	
	vec3 reflectDir = reflect(-lightDirection, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	float distance = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
	
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, UV));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, UV));
	vec3 specular = light.specular * spec * vec3(texture(material.specular, UV));
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	return (ambient + diffuse + specular);
}